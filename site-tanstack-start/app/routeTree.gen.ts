/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as LayoutLayout2Import } from './routes/_layout/_layout-2'
import { Route as LanguageLayoutImport } from './routes/$language._layout'
import { Route as LayoutLayout2LayoutBImport } from './routes/_layout/_layout-2/layout-b'
import { Route as LayoutLayout2LayoutAImport } from './routes/_layout/_layout-2/layout-a'
import { Route as LanguageLayoutSplatImport } from './routes/$language._layout.$'

// Create Virtual Routes

const LanguageImport = createFileRoute('/$language')()

// Create/Update Routes

const LanguageRoute = LanguageImport.update({
  id: '/$language',
  path: '/$language',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutLayout2Route = LayoutLayout2Import.update({
  id: '/_layout/_layout-2',
  getParentRoute: () => rootRoute,
} as any)

const LanguageLayoutRoute = LanguageLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => LanguageRoute,
} as any)

const LayoutLayout2LayoutBRoute = LayoutLayout2LayoutBImport.update({
  id: '/layout-b',
  path: '/layout-b',
  getParentRoute: () => LayoutLayout2Route,
} as any)

const LayoutLayout2LayoutARoute = LayoutLayout2LayoutAImport.update({
  id: '/layout-a',
  path: '/layout-a',
  getParentRoute: () => LayoutLayout2Route,
} as any)

const LanguageLayoutSplatRoute = LanguageLayoutSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => LanguageLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$language': {
      id: '/$language'
      path: '/$language'
      fullPath: '/$language'
      preLoaderRoute: typeof LanguageImport
      parentRoute: typeof rootRoute
    }
    '/$language/_layout': {
      id: '/$language/_layout'
      path: '/$language'
      fullPath: '/$language'
      preLoaderRoute: typeof LanguageLayoutImport
      parentRoute: typeof LanguageRoute
    }
    '/_layout/_layout-2': {
      id: '/_layout/_layout-2'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutLayout2Import
      parentRoute: typeof rootRoute
    }
    '/$language/_layout/$': {
      id: '/$language/_layout/$'
      path: '/$'
      fullPath: '/$language/$'
      preLoaderRoute: typeof LanguageLayoutSplatImport
      parentRoute: typeof LanguageLayoutImport
    }
    '/_layout/_layout-2/layout-a': {
      id: '/_layout/_layout-2/layout-a'
      path: '/layout-a'
      fullPath: '/layout-a'
      preLoaderRoute: typeof LayoutLayout2LayoutAImport
      parentRoute: typeof LayoutLayout2Import
    }
    '/_layout/_layout-2/layout-b': {
      id: '/_layout/_layout-2/layout-b'
      path: '/layout-b'
      fullPath: '/layout-b'
      preLoaderRoute: typeof LayoutLayout2LayoutBImport
      parentRoute: typeof LayoutLayout2Import
    }
  }
}

// Create and export the route tree

interface LanguageLayoutRouteChildren {
  LanguageLayoutSplatRoute: typeof LanguageLayoutSplatRoute
}

const LanguageLayoutRouteChildren: LanguageLayoutRouteChildren = {
  LanguageLayoutSplatRoute: LanguageLayoutSplatRoute,
}

const LanguageLayoutRouteWithChildren = LanguageLayoutRoute._addFileChildren(
  LanguageLayoutRouteChildren,
)

interface LanguageRouteChildren {
  LanguageLayoutRoute: typeof LanguageLayoutRouteWithChildren
}

const LanguageRouteChildren: LanguageRouteChildren = {
  LanguageLayoutRoute: LanguageLayoutRouteWithChildren,
}

const LanguageRouteWithChildren = LanguageRoute._addFileChildren(
  LanguageRouteChildren,
)

interface LayoutLayout2RouteChildren {
  LayoutLayout2LayoutARoute: typeof LayoutLayout2LayoutARoute
  LayoutLayout2LayoutBRoute: typeof LayoutLayout2LayoutBRoute
}

const LayoutLayout2RouteChildren: LayoutLayout2RouteChildren = {
  LayoutLayout2LayoutARoute: LayoutLayout2LayoutARoute,
  LayoutLayout2LayoutBRoute: LayoutLayout2LayoutBRoute,
}

const LayoutLayout2RouteWithChildren = LayoutLayout2Route._addFileChildren(
  LayoutLayout2RouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$language': typeof LanguageLayoutRouteWithChildren
  '': typeof LayoutLayout2RouteWithChildren
  '/$language/$': typeof LanguageLayoutSplatRoute
  '/layout-a': typeof LayoutLayout2LayoutARoute
  '/layout-b': typeof LayoutLayout2LayoutBRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$language': typeof LanguageLayoutRouteWithChildren
  '': typeof LayoutLayout2RouteWithChildren
  '/$language/$': typeof LanguageLayoutSplatRoute
  '/layout-a': typeof LayoutLayout2LayoutARoute
  '/layout-b': typeof LayoutLayout2LayoutBRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$language': typeof LanguageRouteWithChildren
  '/$language/_layout': typeof LanguageLayoutRouteWithChildren
  '/_layout/_layout-2': typeof LayoutLayout2RouteWithChildren
  '/$language/_layout/$': typeof LanguageLayoutSplatRoute
  '/_layout/_layout-2/layout-a': typeof LayoutLayout2LayoutARoute
  '/_layout/_layout-2/layout-b': typeof LayoutLayout2LayoutBRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$language'
    | ''
    | '/$language/$'
    | '/layout-a'
    | '/layout-b'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$language' | '' | '/$language/$' | '/layout-a' | '/layout-b'
  id:
    | '__root__'
    | '/'
    | '/$language'
    | '/$language/_layout'
    | '/_layout/_layout-2'
    | '/$language/_layout/$'
    | '/_layout/_layout-2/layout-a'
    | '/_layout/_layout-2/layout-b'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LanguageRoute: typeof LanguageRouteWithChildren
  LayoutLayout2Route: typeof LayoutLayout2RouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LanguageRoute: LanguageRouteWithChildren,
  LayoutLayout2Route: LayoutLayout2RouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$language",
        "/_layout/_layout-2"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$language": {
      "filePath": "/",
      "children": [
        "/$language/_layout"
      ]
    },
    "/$language/_layout": {
      "filePath": "$language._layout.tsx",
      "parent": "/$language",
      "children": [
        "/$language/_layout/$"
      ]
    },
    "/_layout/_layout-2": {
      "filePath": "_layout/_layout-2.tsx",
      "children": [
        "/_layout/_layout-2/layout-a",
        "/_layout/_layout-2/layout-b"
      ]
    },
    "/$language/_layout/$": {
      "filePath": "$language._layout.$.tsx",
      "parent": "/$language/_layout"
    },
    "/_layout/_layout-2/layout-a": {
      "filePath": "_layout/_layout-2/layout-a.tsx",
      "parent": "/_layout/_layout-2"
    },
    "/_layout/_layout-2/layout-b": {
      "filePath": "_layout/_layout-2/layout-b.tsx",
      "parent": "/_layout/_layout-2"
    }
  }
}
ROUTE_MANIFEST_END */
